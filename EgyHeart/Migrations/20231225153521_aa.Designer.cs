// <auto-generated />
using System;
using EgyHeart.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EgyHeart.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231225153521_aa")]
    partial class aa
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EgyHeart.Models.M_Medical.ClinicTran", b =>
                {
                    b.Property<double>("MasterId")
                        .HasColumnType("float")
                        .HasColumnName("MASTER_ID");

                    b.Property<double>("CheckId")
                        .HasColumnType("float")
                        .HasColumnName("CHECK_ID");

                    b.Property<double>("ExYear")
                        .HasColumnType("float")
                        .HasColumnName("EX_YEAR");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime")
                        .HasColumnName("APPROVAL_DATE");

                    b.Property<double?>("ApprovalPeriod")
                        .HasColumnType("float")
                        .HasColumnName("APPROVAL_PERIOD");

                    b.Property<double?>("AttendanceSer")
                        .HasColumnType("float")
                        .HasColumnName("ATTENDANCE_SER");

                    b.Property<string>("BeneficiaryName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("BENEFICIARY_NAME");

                    b.Property<string>("BrReplc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BR_REPLC");

                    b.Property<double?>("BranchId")
                        .HasColumnType("float")
                        .HasColumnName("BRANCH_ID");

                    b.Property<double?>("CheckIdCancel")
                        .HasColumnType("float")
                        .HasColumnName("CHECK_ID_CANCEL");

                    b.Property<double?>("ClinicId")
                        .HasColumnType("float")
                        .HasColumnName("CLINIC_ID");

                    b.Property<double?>("CompId")
                        .HasColumnType("float")
                        .HasColumnName("COMP_ID");

                    b.Property<double?>("CompIdDtl")
                        .HasColumnType("float")
                        .HasColumnName("COMP_ID_DTL");

                    b.Property<decimal?>("CompValue")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("COMP_VALUE");

                    b.Property<DateTime?>("ConvDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CONV_DATE");

                    b.Property<decimal?>("CostPrice")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("COST_PRICE");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CREATE_DATE");

                    b.Property<double?>("CshOrdNum")
                        .HasColumnType("float")
                        .HasColumnName("CSH_ORD_NUM");

                    b.Property<DateTime?>("DateAnalysis")
                        .HasColumnType("datetime")
                        .HasColumnName("DATE_ANALYSIS");

                    b.Property<double?>("Deal")
                        .HasColumnType("float")
                        .HasColumnName("DEAL");

                    b.Property<decimal?>("DiscountVal")
                        .HasColumnType("decimal(11, 2)")
                        .HasColumnName("DISCOUNT_VAL");

                    b.Property<double?>("DocNo")
                        .HasColumnType("float")
                        .HasColumnName("DOC_NO");

                    b.Property<double?>("DrAlalysis")
                        .HasColumnType("float")
                        .HasColumnName("DR_ALALYSIS");

                    b.Property<double?>("DrCode")
                        .HasColumnType("float")
                        .HasColumnName("DR_CODE");

                    b.Property<double?>("DrCodeConerter")
                        .HasColumnType("float")
                        .HasColumnName("DR_CODE_CONERTER");

                    b.Property<decimal?>("DrDueVal")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("DR_DUE_VAL");

                    b.Property<double?>("DrSend")
                        .HasColumnType("float")
                        .HasColumnName("DR_SEND");

                    b.Property<decimal?>("DrSendVal")
                        .HasColumnType("decimal(11, 2)")
                        .HasColumnName("DR_SEND_VAL");

                    b.Property<decimal?>("DrVal")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("DR_VAL");

                    b.Property<decimal?>("DrValPat")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("DR_VAL_PAT");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<double?>("EntryStatus")
                        .HasColumnType("float")
                        .HasColumnName("ENTRY_STATUS");

                    b.Property<DateTime?>("ExDate")
                        .HasColumnType("datetime")
                        .HasColumnName("EX_DATE");

                    b.Property<string>("ExDay")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("EX_DAY");

                    b.Property<double?>("ExInvoiceNo")
                        .HasColumnType("float")
                        .HasColumnName("EX_INVOICE_NO");

                    b.Property<double?>("ExMonth")
                        .HasColumnType("float")
                        .HasColumnName("EX_MONTH");

                    b.Property<double?>("ExPeriod")
                        .HasColumnType("float")
                        .HasColumnName("EX_PERIOD");

                    b.Property<double?>("ExchangeType")
                        .HasColumnType("float")
                        .HasColumnName("EXCHANGE_TYPE");

                    b.Property<decimal?>("ExtraVal")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("EXTRA_VAL");

                    b.Property<decimal?>("ExtraVal2")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("EXTRA_VAL2");

                    b.Property<double?>("Flag")
                        .HasColumnType("float")
                        .HasColumnName("FLAG");

                    b.Property<double?>("Flag1")
                        .HasColumnType("float")
                        .HasColumnName("FLAG1");

                    b.Property<double?>("FlagDrDisc")
                        .HasColumnType("float")
                        .HasColumnName("FLAG_DR_DISC");

                    b.Property<decimal?>("HoVal")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("HO_VAL");

                    b.Property<decimal?>("HoValPat")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("HO_VAL_PAT");

                    b.Property<double?>("IncomingFr")
                        .HasColumnType("float")
                        .HasColumnName("INCOMING_FR");

                    b.Property<string>("ItemMaster")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ITEM_MASTER");

                    b.Property<double?>("ItemVisible")
                        .HasColumnType("float")
                        .HasColumnName("ITEM_VISIBLE");

                    b.Property<string>("ItmBarcode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ITM_BARCODE");

                    b.Property<double?>("ItmServFlag")
                        .HasColumnType("float")
                        .HasColumnName("ITM_SERV_FLAG");

                    b.Property<double?>("Kinship")
                        .HasColumnType("float")
                        .HasColumnName("KINSHIP");

                    b.Property<short?>("KnowUsFr")
                        .HasColumnType("smallint")
                        .HasColumnName("KNOW_US_FR");

                    b.Property<double?>("Machine")
                        .HasColumnType("float")
                        .HasColumnName("MACHINE");

                    b.Property<string>("MainCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE");

                    b.Property<long?>("MainInvNo")
                        .HasColumnType("bigint")
                        .HasColumnName("MAIN_INV_NO");

                    b.Property<int?>("MainInvNoAll")
                        .HasColumnType("int")
                        .HasColumnName("MAIN_INV_NO_ALL");

                    b.Property<int?>("MainInvNoTax")
                        .HasColumnType("int")
                        .HasColumnName("MAIN_INV_NO_TAX");

                    b.Property<int?>("MainInvTot")
                        .HasColumnType("int")
                        .HasColumnName("MAIN_INV_TOT");

                    b.Property<decimal?>("MchHours")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("MCH_HOURS");

                    b.Property<DateTime?>("ModifyDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("MODIFY_DATE_TIME");

                    b.Property<double?>("Nerse1")
                        .HasColumnType("float")
                        .HasColumnName("NERSE1");

                    b.Property<double?>("Nerse2")
                        .HasColumnType("float")
                        .HasColumnName("NERSE2");

                    b.Property<DateTime?>("PatAdDate")
                        .HasColumnType("datetime")
                        .HasColumnName("PAT_AD_DATE");

                    b.Property<double?>("PatEmerg")
                        .HasColumnType("float")
                        .HasColumnName("PAT_EMERG");

                    b.Property<double?>("PatExternal")
                        .HasColumnType("float")
                        .HasColumnName("PAT_EXTERNAL");

                    b.Property<double?>("PatId")
                        .HasColumnType("float")
                        .HasColumnName("PAT_ID");

                    b.Property<double?>("PatIdSection")
                        .HasColumnType("float")
                        .HasColumnName("PAT_ID_SECTION");

                    b.Property<decimal?>("PatPerc")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("PAT_PERC");

                    b.Property<string>("PatPharName")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)")
                        .HasColumnName("PAT_PHAR_NAME");

                    b.Property<double?>("PatSer")
                        .HasColumnType("float")
                        .HasColumnName("PAT_SER");

                    b.Property<double?>("PatStatus")
                        .HasColumnType("float")
                        .HasColumnName("PAT_STATUS");

                    b.Property<DateTime?>("PatTime")
                        .HasColumnType("datetime")
                        .HasColumnName("PAT_TIME");

                    b.Property<decimal?>("PatientValue")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("PATIENT_VALUE");

                    b.Property<double?>("PipeFlag")
                        .HasColumnType("float")
                        .HasColumnName("PIPE_FLAG");

                    b.Property<double?>("PostId")
                        .HasColumnType("float")
                        .HasColumnName("POST_ID");

                    b.Property<double?>("ProcedureId")
                        .HasColumnType("float")
                        .HasColumnName("PROCEDURE_ID");

                    b.Property<double?>("Qty")
                        .HasColumnType("float")
                        .HasColumnName("QTY");

                    b.Property<double?>("ReceptEmpCode")
                        .HasColumnType("float")
                        .HasColumnName("RECEPT_EMP_CODE");

                    b.Property<double?>("Replcate")
                        .HasColumnType("float")
                        .HasColumnName("REPLCATE");

                    b.Property<double?>("ReserveFlag")
                        .HasColumnType("float")
                        .HasColumnName("RESERVE_FLAG");

                    b.Property<double?>("SClinicId")
                        .HasColumnType("float")
                        .HasColumnName("S_CLINIC_ID");

                    b.Property<decimal?>("SalsePrice")
                        .HasColumnType("decimal(12, 3)")
                        .HasColumnName("SALSE_PRICE");

                    b.Property<double?>("SendFr")
                        .HasColumnType("float")
                        .HasColumnName("SEND_FR");

                    b.Property<double?>("SendTo")
                        .HasColumnType("float")
                        .HasColumnName("SEND_TO");

                    b.Property<double?>("SerSys")
                        .HasColumnType("float")
                        .HasColumnName("SER_SYS");

                    b.Property<double?>("Serial")
                        .HasColumnType("float")
                        .HasColumnName("SERIAL");

                    b.Property<double?>("SeriviceWithItems")
                        .HasColumnType("float")
                        .HasColumnName("SERIVICE_WITH_ITEMS");

                    b.Property<double?>("ServId")
                        .HasColumnType("float")
                        .HasColumnName("SERV_ID");

                    b.Property<double?>("SessionNo")
                        .HasColumnType("float")
                        .HasColumnName("SESSION_NO");

                    b.Property<double?>("SpecificCode")
                        .HasColumnType("float")
                        .HasColumnName("SPECIFIC_CODE");

                    b.Property<double?>("StockCode")
                        .HasColumnType("float")
                        .HasColumnName("STOCK_CODE");

                    b.Property<double?>("SubCode")
                        .HasColumnType("float")
                        .HasColumnName("SUB_CODE");

                    b.Property<string>("SupCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("SUP_CODE");

                    b.Property<double?>("TransType")
                        .HasColumnType("float")
                        .HasColumnName("TRANS_TYPE");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("UNIT_PRICE");

                    b.Property<double?>("UserApproval")
                        .HasColumnType("float")
                        .HasColumnName("USER_APPROVAL");

                    b.Property<double?>("UserCodeCreate")
                        .HasColumnType("float")
                        .HasColumnName("USER_CODE_CREATE");

                    b.Property<double?>("UserCodeModify")
                        .HasColumnType("float")
                        .HasColumnName("USER_CODE_MODIFY");

                    b.Property<double?>("UserSafe")
                        .HasColumnType("float")
                        .HasColumnName("USER_SAFE");

                    b.Property<decimal?>("ValueService")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("VALUE_SERVICE");

                    b.Property<double?>("VistConfirm")
                        .HasColumnType("float")
                        .HasColumnName("VIST_CONFIRM");

                    b.Property<double?>("WaitConv")
                        .HasColumnType("float")
                        .HasColumnName("WAIT_CONV");

                    b.Property<DateTime?>("WaitDate")
                        .HasColumnType("datetime")
                        .HasColumnName("WAIT_DATE");

                    b.Property<double?>("WaitOther")
                        .HasColumnType("float")
                        .HasColumnName("WAIT_OTHER");

                    b.Property<double?>("WaitReson")
                        .HasColumnType("float")
                        .HasColumnName("WAIT_RESON");

                    b.Property<double?>("WaitStatus")
                        .HasColumnType("float")
                        .HasColumnName("WAIT_STATUS");

                    b.HasKey("MasterId", "CheckId", "ExYear");

                    b.ToTable("CLINIC_TRANS");
                });

            modelBuilder.Entity("EgyHeart.Models.M_Medical.Pat", b =>
                {
                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime")
                        .HasColumnName("BIRTH_DATE");

                    b.Property<string>("BrReplc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BR_REPLC");

                    b.Property<double?>("BranchId")
                        .HasColumnType("float")
                        .HasColumnName("BRANCH_ID");

                    b.Property<string>("DocCompNr")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("DOC_COMP_NR");

                    b.Property<string>("DocPatNr")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("DOC_PAT_NR");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<string>("FinanceId")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("FINANCE_ID");

                    b.Property<double?>("IdType")
                        .HasColumnType("float")
                        .HasColumnName("ID_TYPE");

                    b.Property<double?>("NationalityId")
                        .HasColumnType("float")
                        .HasColumnName("NATIONALITY_ID");

                    b.Property<double?>("NewOld")
                        .HasColumnType("float")
                        .HasColumnName("NEW_OLD");

                    b.Property<string>("PCrt")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("P_CRT");

                    b.Property<string>("PDep")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("P_DEP");

                    b.Property<string>("PGroup")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("P_GROUP");

                    b.Property<string>("PatAddress")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("PAT_ADDRESS");

                    b.Property<double?>("PatAgeType")
                        .HasColumnType("float")
                        .HasColumnName("PAT_AGE_TYPE");

                    b.Property<DateTime?>("PatDate")
                        .HasColumnType("datetime")
                        .HasColumnName("PAT_DATE");

                    b.Property<string>("PatEmail")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("PAT_EMAIL");

                    b.Property<int>("PatId")
                        .HasColumnType("int")
                        .HasColumnName("PAT_ID");

                    b.Property<long?>("PatIdCard")
                        .HasColumnType("bigint")
                        .HasColumnName("PAT_ID_CARD");

                    b.Property<long?>("PatIdSer")
                        .HasColumnType("bigint")
                        .HasColumnName("PAT_ID_SER");

                    b.Property<string>("PatMobile")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("PAT_MOBILE");

                    b.Property<string>("PatName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PAT_NAME");

                    b.Property<string>("PatPassword")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("PAT_PASSWORD");

                    b.Property<double?>("PatRepeat")
                        .HasColumnType("float")
                        .HasColumnName("PAT_REPEAT");

                    b.Property<string>("PatTel")
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("PAT_TEL");

                    b.Property<double?>("PersonKind")
                        .HasColumnType("float")
                        .HasColumnName("PERSON_KIND");

                    b.Property<string>("PersonalId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PERSONAL_ID");

                    b.Property<double?>("ReligionId")
                        .HasColumnType("float")
                        .HasColumnName("RELIGION_ID");

                    b.Property<double?>("Replcate")
                        .HasColumnType("float")
                        .HasColumnName("REPLCATE");

                    b.Property<double?>("SheetNo")
                        .HasColumnType("float")
                        .HasColumnName("SHEET_NO");

                    b.Property<double?>("UserCode")
                        .HasColumnType("float")
                        .HasColumnName("USER_CODE");

                    b.Property<double?>("YoungDay")
                        .HasColumnType("float")
                        .HasColumnName("YOUNG_DAY");

                    b.Property<double?>("YoungMonth")
                        .HasColumnType("float")
                        .HasColumnName("YOUNG_MONTH");

                    b.ToTable("PAT");
                });

            modelBuilder.Entity("EgyHeart.Models.M_Medical.PatAdmission", b =>
                {
                    b.Property<double>("MasterId")
                        .HasColumnType("float")
                        .HasColumnName("MASTER_ID");

                    b.Property<double>("ExYear")
                        .HasColumnType("float")
                        .HasColumnName("EX_YEAR");

                    b.Property<long?>("AccTransNo")
                        .HasColumnType("bigint")
                        .HasColumnName("ACC_TRANS_NO");

                    b.Property<long?>("AccTransNo2")
                        .HasColumnType("bigint")
                        .HasColumnName("ACC_TRANS_NO2");

                    b.Property<double?>("AccTransType")
                        .HasColumnType("float")
                        .HasColumnName("ACC_TRANS_TYPE");

                    b.Property<decimal?>("Amanat")
                        .HasColumnType("decimal(11, 2)")
                        .HasColumnName("AMANAT");

                    b.Property<decimal?>("AmanatRet")
                        .HasColumnType("decimal(11, 2)")
                        .HasColumnName("AMANAT_RET");

                    b.Property<decimal?>("AmanatRetPat")
                        .HasColumnType("decimal(11, 2)")
                        .HasColumnName("AMANAT_RET_PAT");

                    b.Property<string>("Arch")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("ARCH");

                    b.Property<string>("BeneficiaryName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("BENEFICIARY_NAME");

                    b.Property<double?>("BookRoom")
                        .HasColumnType("float")
                        .HasColumnName("BOOK_ROOM");

                    b.Property<string>("BrReplc")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("BR_REPLC");

                    b.Property<double?>("BranchId")
                        .HasColumnType("float")
                        .HasColumnName("BRANCH_ID");

                    b.Property<double?>("BrnachInitial")
                        .HasColumnType("float")
                        .HasColumnName("BRNACH_INITIAL");

                    b.Property<double?>("CashNo")
                        .HasColumnType("float")
                        .HasColumnName("CASH_NO");

                    b.Property<string>("CoName2")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("CO_NAME_2");

                    b.Property<double?>("CompId")
                        .HasColumnType("float")
                        .HasColumnName("COMP_ID");

                    b.Property<double?>("CompIdDtl")
                        .HasColumnType("float")
                        .HasColumnName("COMP_ID_DTL");

                    b.Property<decimal?>("CompValue")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("COMP_VALUE");

                    b.Property<double?>("DaysNo")
                        .HasColumnType("float")
                        .HasColumnName("DAYS_NO");

                    b.Property<decimal?>("DaysValue")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("DAYS_VALUE");

                    b.Property<double?>("Deal")
                        .HasColumnType("float")
                        .HasColumnName("DEAL");

                    b.Property<string>("DecisionSheet")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("DECISION_SHEET");

                    b.Property<decimal?>("DiscountVal")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("DISCOUNT_VAL");

                    b.Property<double?>("DrCode")
                        .HasColumnType("float")
                        .HasColumnName("DR_CODE");

                    b.Property<double?>("DrObtain")
                        .HasColumnType("float")
                        .HasColumnName("DR_OBTAIN");

                    b.Property<double?>("DrSend")
                        .HasColumnType("float")
                        .HasColumnName("DR_SEND");

                    b.Property<decimal?>("DrTax")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("DR_TAX");

                    b.Property<decimal?>("DrVal")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("DR_VAL");

                    b.Property<decimal?>("DueVal")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("DUE_VAL");

                    b.Property<string>("EInvId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("E_INV_ID");

                    b.Property<string>("EInvSts")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("E_INV_STS");

                    b.Property<DateTime?>("EinvDate")
                        .HasColumnType("datetime")
                        .HasColumnName("EINV_DATE");

                    b.Property<string>("EinvErr")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("EINV_ERR");

                    b.Property<decimal?>("EnayaTot")
                        .HasColumnType("decimal(11, 2)")
                        .HasColumnName("ENAYA_TOT");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ENTRY_DATE");

                    b.Property<double?>("ExMonth")
                        .HasColumnType("float")
                        .HasColumnName("EX_MONTH");

                    b.Property<double?>("ExMonthTo")
                        .HasColumnType("float")
                        .HasColumnName("EX_MONTH_TO");

                    b.Property<double?>("ExYearTo")
                        .HasColumnType("float")
                        .HasColumnName("EX_YEAR_TO");

                    b.Property<double?>("ExchangeType")
                        .HasColumnType("float")
                        .HasColumnName("EXCHANGE_TYPE");

                    b.Property<decimal?>("ExtraVal")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("EXTRA_VAL");

                    b.Property<decimal?>("ExtraVal2")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("EXTRA_VAL2");

                    b.Property<string>("FinanceId")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("FINANCE_ID");

                    b.Property<double?>("Flag")
                        .HasColumnType("float")
                        .HasColumnName("FLAG");

                    b.Property<double?>("InvType")
                        .HasColumnType("float")
                        .HasColumnName("INV_TYPE");

                    b.Property<double?>("InvTypeTax")
                        .HasColumnType("float")
                        .HasColumnName("INV_TYPE_TAX");

                    b.Property<double?>("JorKiedNo1")
                        .HasColumnType("float")
                        .HasColumnName("JOR_KIED_NO1");

                    b.Property<double?>("JorKiedNo2")
                        .HasColumnType("float")
                        .HasColumnName("JOR_KIED_NO2");

                    b.Property<double?>("JorKiedNo3")
                        .HasColumnType("float")
                        .HasColumnName("JOR_KIED_NO3");

                    b.Property<decimal?>("KastaraTot")
                        .HasColumnType("decimal(11, 2)")
                        .HasColumnName("KASTARA_TOT");

                    b.Property<double?>("Kinship")
                        .HasColumnType("float")
                        .HasColumnName("KINSHIP");

                    b.Property<short?>("KnowUsFr")
                        .HasColumnType("smallint")
                        .HasColumnName("KNOW_US_FR");

                    b.Property<double?>("MCode")
                        .HasColumnType("float")
                        .HasColumnName("M_CODE");

                    b.Property<double?>("MCodeDtl")
                        .HasColumnType("float")
                        .HasColumnName("M_CODE_DTL");

                    b.Property<string>("MainCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("MAIN_CODE");

                    b.Property<string>("MainInvDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("MAIN_INV_DESC");

                    b.Property<int?>("MainInvNo")
                        .HasColumnType("int")
                        .HasColumnName("MAIN_INV_NO");

                    b.Property<int?>("MainInvNoAll")
                        .HasColumnType("int")
                        .HasColumnName("MAIN_INV_NO_ALL");

                    b.Property<int?>("MainInvNoTax")
                        .HasColumnType("int")
                        .HasColumnName("MAIN_INV_NO_TAX");

                    b.Property<decimal?>("MainInvTot")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("MAIN_INV_TOT");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOTE");

                    b.Property<double?>("OperationCode")
                        .HasColumnType("float")
                        .HasColumnName("OPERATION_CODE");

                    b.Property<double?>("OperationType")
                        .HasColumnType("float")
                        .HasColumnName("OPERATION_TYPE");

                    b.Property<string>("PCrt")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("P_CRT");

                    b.Property<string>("PDep")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("P_DEP");

                    b.Property<string>("PGroup")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("P_GROUP");

                    b.Property<DateTime?>("PatAdDate")
                        .HasColumnType("datetime")
                        .HasColumnName("PAT_AD_DATE");

                    b.Property<DateTime?>("PatAdTime")
                        .HasColumnType("datetime")
                        .HasColumnName("PAT_AD_TIME");

                    b.Property<double?>("PatCardId")
                        .HasColumnType("float")
                        .HasColumnName("PAT_CARD_ID");

                    b.Property<double?>("PatClose")
                        .HasColumnType("float")
                        .HasColumnName("PAT_CLOSE");

                    b.Property<DateTime?>("PatDateExit")
                        .HasColumnType("datetime")
                        .HasColumnName("PAT_DATE_EXIT");

                    b.Property<DateTime?>("PatDateOut")
                        .HasColumnType("datetime")
                        .HasColumnName("PAT_DATE_OUT");

                    b.Property<double?>("PatEmergency")
                        .HasColumnType("float")
                        .HasColumnName("PAT_EMERGENCY");

                    b.Property<double?>("PatExit")
                        .HasColumnType("float")
                        .HasColumnName("PAT_EXIT");

                    b.Property<double?>("PatExternal")
                        .HasColumnType("float")
                        .HasColumnName("PAT_EXTERNAL");

                    b.Property<double?>("PatFr")
                        .HasColumnType("float")
                        .HasColumnName("PAT_FR");

                    b.Property<double?>("PatId")
                        .HasColumnType("float")
                        .HasColumnName("PAT_ID");

                    b.Property<double?>("PatIdSection")
                        .HasColumnType("float")
                        .HasColumnName("PAT_ID_SECTION");

                    b.Property<double?>("PatInternal")
                        .HasColumnType("float")
                        .HasColumnName("PAT_INTERNAL");

                    b.Property<double?>("PatRelationship")
                        .HasColumnType("float")
                        .HasColumnName("PAT_RELATIONSHIP");

                    b.Property<decimal?>("PatientValue")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("PATIENT_VALUE");

                    b.Property<double?>("PayFlag")
                        .HasColumnType("float")
                        .HasColumnName("PAY_FLAG");

                    b.Property<decimal?>("PayPatTot")
                        .HasColumnType("decimal(11, 2)")
                        .HasColumnName("PAY_PAT_TOT");

                    b.Property<double?>("PostId")
                        .HasColumnType("float")
                        .HasColumnName("POST_ID");

                    b.Property<decimal?>("Prepaid")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("PREPAID");

                    b.Property<double?>("ProcedureId")
                        .HasColumnType("float")
                        .HasColumnName("PROCEDURE_ID");

                    b.Property<double?>("Replcate")
                        .HasColumnType("float")
                        .HasColumnName("REPLCATE");

                    b.Property<string>("RoomNo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ROOM_NO");

                    b.Property<long?>("SafeDocNo")
                        .HasColumnType("bigint")
                        .HasColumnName("SAFE_DOC_NO");

                    b.Property<long?>("SafeDocNo2")
                        .HasColumnType("bigint")
                        .HasColumnName("SAFE_DOC_NO2");

                    b.Property<double?>("SafeDocNo3")
                        .HasColumnType("float")
                        .HasColumnName("SAFE_DOC_NO3");

                    b.Property<double?>("SafeInNo1")
                        .HasColumnType("float")
                        .HasColumnName("SAFE_IN_NO1");

                    b.Property<double?>("SafeInNo2")
                        .HasColumnType("float")
                        .HasColumnName("SAFE_IN_NO2");

                    b.Property<double?>("SendFr")
                        .HasColumnType("float")
                        .HasColumnName("SEND_FR");

                    b.Property<double?>("SendTo")
                        .HasColumnType("float")
                        .HasColumnName("SEND_TO");

                    b.Property<double?>("SendTransfir")
                        .HasColumnType("float")
                        .HasColumnName("SEND_TRANSFIR");

                    b.Property<double?>("SessionNo")
                        .HasColumnType("float")
                        .HasColumnName("SESSION_NO");

                    b.Property<decimal?>("StampVal")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("STAMP_VAL");

                    b.Property<string>("SubCode")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("SUB_CODE");

                    b.Property<string>("Submitid")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SUBMITID");

                    b.Property<DateTime?>("TaxDate")
                        .HasColumnType("datetime")
                        .HasColumnName("TAX_DATE");

                    b.Property<double?>("TaxFlag")
                        .HasColumnType("float")
                        .HasColumnName("TAX_FLAG");

                    b.Property<decimal?>("TransfVal")
                        .HasColumnType("decimal(12, 2)")
                        .HasColumnName("TRANSF_VAL");

                    b.Property<double?>("UserCodeCreate")
                        .HasColumnType("float")
                        .HasColumnName("USER_CODE_CREATE");

                    b.Property<double?>("UserCodeModify")
                        .HasColumnType("float")
                        .HasColumnName("USER_CODE_MODIFY");

                    b.Property<string>("Uuid")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("UUID");

                    b.Property<double?>("WindowFlag")
                        .HasColumnType("float")
                        .HasColumnName("WINDOW_FLAG");

                    b.HasKey("MasterId", "ExYear");

                    b.ToTable("PAT_ADMISSION");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
